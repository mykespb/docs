Файл настройки: ~/.vimrc

Можно редактировать файлы через сеть, например
:e <scp|ftp|ftps>://user@host/path/to/the/file.txt
:Ex или :e ./ - файловый менеджер

== Простое перемещение и правка ==
hjkl                      перемещение в разные стороны
i                         режим вставки
I                         добавление в начало строки
a                         режим добавления
A                         добавление в конец строки
o                         добавить строку сразу за текущей
O                         добавить строку перед текущей
R                         писать поверх имеющегося текста
u, :u[ndo]                отмена предыдущего действия (undo)
CTR-R, :red[o]            отмена отмены предыдущего действия (redo)
dd                        вырезать (удалить) строку
cc                        удалить и начать редактирование
yy                        копировать строку
p                         вставить из буфера обмена
<n>d                      удалить n+1 строку
<n>y                      скопировать n+1 строку
ESC                       перейти в режим просмотра
DEL                       удалить следующий символ
:<n>                      перейти на строку #n
%                         перейти к парной скобке

Ctrl+G        номер текущей строки, общее число строк в файле и его имя
N,M ya        копировать в буфер обмена строки с N до M включительно 
                (потом их можно вставить в нужном месте той же "p")
Ndd           удалить N строк (любые удалённые строки попадают в буфер обмена)

== Вход и выход ==
:e <fname>                редактировать файл
:w [fname]                записать изменения
:wa                       сохранить изменения во всех файлах
:q                        выйти из редактора
:q!                       выйти из редактора, не сохраняя изменения

:color <name>             выбор цветовой схемы. цветвые схемы:
                            /usr/local/share/vim/vim72/colors/*.vim

== Каталоги == 
:pwd                      текущий каталог
:cd [path]                перейти в другой каталог
:!<cmd>                   выполнить команду

== Автодополнение ==
CTR+p или CTR+n           автоматическое дополнение текста
                            (в режиме редактирования)
CTR+r,=,<expr>            вставить выражение, например 5*2 - 3
                            (в режиме редактирования)
CTR+u, CTR+d              Page Up / Page Down
CTR+y, CTR+e              Перемотка вверх/вниз без движения курсора               

== Подсветка синтаксиса ==
:syntax on                включить подсветку
:syntax off               выключить подсветку (по умолчанию)

== Перенос строк ==
:set wrap                 разрешить word wrap (по умолчанию)
:set nowrap               запретить word wrap

== Печать ==
:ha[rdcopy]                   распечатать документ
:set printoptions=duplex:off  отключить двустороннюю печать

== Сворачивание ==
zc                        свернуть блок
zo                        развернуть блок
zM                        закрыть все блоки
zR                        открыть все блоки
za                        инвертирование
zf                        см :set foldmethod=manual
:set foldenable           включить свoрачивание
:set foldmethod=syntax    сворачивание на основе синтаксиса
:set foldmethod=indent    сворачивание на основе отступов
:set foldmethod=manual    выделяем участок с помощью v и говорим zf
:set foldmethod=marker    сворачивание на основе маркеров в тексте
:set foldmarker=bigin,end задаем маркеры начала и конца блока

== Маркеры ==
ma                        установить локальный маркер a
mB                        установить глобальный маркер B
`c                        перейти к локальному маркеру c
`0                        вернуться на позицию, на которой закончили
                            работу при закрытии vim
:marks                    просмотр маркеров

== Регистры ==
"ayy                      скопировать строку в регистр a
"bdd                      вырезать строку и поместить в регистр b
"С2d                      вырезать три строки и дописать в конец
                            регистра C
:reg [name1][name2][...]  просмотреть содержимое регистров

== Выделение ==
v + hjkl                  выделение текста
SHIFT + v                 выделить строку
CTR + v                   выделение прямоугольника
p                         вставить
y                         копировать
d                         удалить
gu                        к нижнему регистру
gU                        к верхнему регистру

== Отступы ==
[#]>                      сдвинуть выделенное вправо
[#]<                      сдвинуть выделенное влево
[#]>>                     сдвинуть строку вправо
[#]<<                     сдвинуть строку влево
set tabstop=#             для табуляции используется # пробелов
set shiftwidth=#          в командах отступа используется # пробелов 
set [no]expandtab         заменять ли табуляцию на соответствующее
                            число пробелов

== Поиск и замена в файле ==
/<выражение>             поиск выражения в файле вперёд
?<выражение>             поиск выражения в файле назад
n                        следующее совпадение
N                        предыдущее совпадение
:%s/foo/bar/gi           замена строк, см http://eax.me/regular-expr/

== Нумерация строк ==
:set number              включить нумерацию строк
:set nonumber            отключить нумерацию строк

== Работа с Tab'ами ==
:tabnew [fname]          создать tab
:tabs                    вывести список табов
:tabn                    следующий таб
:tabp                    предыдущий таб
<n>gt                    перейти на таб #n
gt                       следующий таб
gT                       предыдущий таб

== Работа с окнами ==
:split                   горизонтальное разбиение
:vsplit                  вертикальное разбиение
Ctr+W, затем
  с                      закрыть окно
  =                      установить равный размер окон
  hjkl или стрелочки     перемещение между окнами

== Проверка орфографии ==
    mkdir -p ~/.vim/spell
    cd ~/.vim/spell
    wget http://ftp.vim.org/vim/runtime/spell/ru.koi8-r.sug
    wget http://ftp.vim.org/vim/runtime/spell/ru.koi8-r.spl
    wget http://ftp.vim.org/vim/runtime/spell/en.ascii.sug
    wget http://ftp.vim.org/vim/runtime/spell/en.ascii.spl

setlocal spell spelllang=ru,en   включить проверку орфографии
set spell!                       вкл/выкл проверку во время работы
]s                               следующее слово с ошибкой
[s                               предыдущее слово с ошибкой
zg                               good word
zw                               wrong word
zG                               ignore word

== Работа с кодировкой ==
e ++enc=<имя кодировки>         Редактирование файла в ??? кодировке
w ++enc=<имя кодировки>         Сохранить файл в новой кодировке
set fileencodings=utf-8,koi8-r  Список автоматически определяемых
                                  кодировок в порядке убывания
                                  приоритета

== Другое ==
:set [no]wildmenu          При авто-дополнении в командной строке над
                             ней выводятся возможные варианты
:set list                  Отображать табуляцию и переводы строк
q:                         История команд
.                          Повторение последней команды

== Детали ==

** help **

The most import thing to learn about in vim is...

:help
and

:help command
TAB - cycles through possible command completions
CTRL-d - lists possible command completions
For example, try

:help tags (then CTRL-d and TAB)
Do help i_ CTRL-d for insert commands, v_ for visual, etc.

Also, when in the help pages, CTRL-] jumps to subjects between |bars| and CTRL-T jumps back (and, of course, :q to quit).

** variables ** 

Here's how to show, set, and reset vim's variables:

:set            - shows vars different from defaults
:set all        - shows all values
:set foo?       - shows the value of foo
:set foo+=opt   - add opt to the value w/o changing others
:set foo-=opt   - remove opt from value
:set foo&       - reset foo to default value
:setlocal foo   - only the current buffer

** modelines **

modelines allow you to set variables specific to a file. By default, the first and last five lines are read by vim for variable settings. For example, if you put the following in the last line of a C program, you would get a textwidth of 60 chars when editing that file:

/* vim: tw=60 ts=2: */
The modelines variable sets the number of lines (at the beginning and end of each file) vim checks for initializations.

** word & line completion **

Typing is a pain! In insert mode, try:

ctrl-n, ctrl-p    - next/previous word completion 
                    (similar word in current file)

ctrl-x ctrl-l (ctrl-n/p)    - line completion

:set dictionary=/usr/share/dict/words
ctrl-x ctrl-k     - dictionary completion
also

ctrl-w      - erases word (insert mode...
ctrl-u      - erases line  ...or on command line)

** searching **

For basic searching:

/pattern       - search forward for pattern
?pattern       - search backward
n              - repeat forward search
N              - repeat backward
Some variables you might want to set:

:set ignorecase - case insensitive
:set smartcase  - use case if any caps used 
:set incsearch  - show match as search proceeds
:set hlsearch   - search highlighting
More cool searching tricks:

*               - search for word currently under cursor
g*              - search for partial word under cursor 
                  (repeat with n)
ctrl-o, ctrl-i  - go through jump locations
[I              - show lines with matching word under cursor
Search and replace...

:%s/search_for_this/replace_with_this/    - search whole file and replace
:%s/search_for_this/replace_with_this/c   - confirm each replace

** text selection **

If you want to do the same thing to a collection of lines, like cut, copy, sort, or format, you first need to select the text. Get out of insert mode, hit one of the options below, and then move up or down a few lines. You should see the selected text highlighted.

V       - selects entire lines 
v       - selects range of text
ctrl-v  - selects columns
gv      - reselect block
After selecting the text, try d to delete, or y to copy, or :s/match/replace/, or :center, or !sort, or...

Here's one way to move selected text over a few spaces:

 - select a chunk of code using capital V and the arrow keys (or j, k)
 - type colon
 - then type s/^/   /
 - hit return
What you've done is replace the beginning of each selected line (the ^ symbol means "the beginning of the line") with spaces.

** markers **

Use markers to set places you want to quickly get back to, or to specify a block of text you want to copy or cut.
 mk      - mark current position (can use a-z)
 'k      - move to mark k
 d'k     - delete from current position to mark k
 'a-z    - same file
 'A-Z    - beteween files

** indenting **

Some variables you might want to set:

 :set tabstop=8     - tabs are at proper location
 :set expandtab     - don't use actual tab character (ctrl-v)
 :set shiftwidth=4  - indenting is 4 spaces
 :set autoindent    - turns it on
 :set smartindent   - does the right thing (mostly) in programs
 :set cindent       - stricter rules for C programs
I like having auto on, but smart does funny things based on keywords.

To indent the current line, or a visual block:

ctrl-t, ctrl-d  - indent current line forward, backwards 
                  (insert mode)
visual > or <   - indent block by sw (repeat with . )
To stop indenting when pasting with the mouse, add this to your .vimrc:

:set pastetoggle=<f5>
then try hitting the F5 key while in insert mode (or just :set paste).

** reformatting **

These are useful to reformat text paragraphs or chunks of code (NOTE: this does not work for python code...):

    V=  - select text, then reformat with =
    =   - will correct alignment of code
    ==  - one line; 
    gq  - reformat paragraph
Options to change how automatic formatting is done:

    :set formatoptions (default "tcq")
        t - textwidth
        c - comments (plus leader -- see :help comments)
        q - allogw 'gq' to work
        n - numbered lists
        2 - keep second line indent
        1 - single letter words on next line
        r - (in mail) comment leader after 
Other related options:

    :set wrapmargin
    :set textwidth

** folding ** 

Use folds to collapse selected blocks. Useful if you've finished a subroutine and want to save window space, or maybe want to fold all blocks of comments.

    select block, then :fold
    zo - open
    zc - close
See :help foldmethod for options, and use :mkview and :loadview to save and restore the current window.

** multiple windows **

If you want, you can probably do everything from one vim session! :) Here are some commands to turn one vim session (inside one xterm) into multiple windows.

 :e filename      - edit another file
 :split filename  - split window and load another file
 ctrl-w up arrow  - move cursor up a window
 ctrl-w ctrl-w    - move cursor to another window (cycle)
 ctrl-w_          - maximize current window
 ctrl-w=          - make all equal size
 10 ctrl-w+       - increase window size by 10 lines
 :vsplit file     - vertical split
 :sview file      - same as split, but readonly
 :hide            - close current window
 :only            - keep only this window open
 :ls              - show current buffers
 :b 2             - open buffer #2 in this window

** editing in a stream **

You can take the output of any command and send it into a vim session. From there you could format it, change stuff, and then save it to a file.

find . | vim -

** tags **

Using tags makes it easier to jump to certain parts of your programs. First run ctags from the UNIX command line on your source files (e.g., ctags prog.c or ctags -R to recurse) to generate a "tags" file, then use these while editing your source files:

 :tag TAB            - list the known tags
 :tag function_name  - jump to that function
 ctrl-t   - goes to previous spot where you called :tag
 ctrl-]   - calls :tag on the word under the cursor        
 :ptag    - open tag in preview window (also ctrl-w })
 :pclose  - close preview window

** makefiles **

Using makefiles can save time when compiling lots of source files into one program. vim can run the makefile without leaving the editing session:

 :map <f9> :make    - map the F9 key to run make
 :set makeprg       - change what :make does
:make will compile if you are using a Makefile. Use these to examine the compile errors:

 :copen    - open a mini-window with list of errors
           - hit enter on an error to jump to line 
 :cclose   - closes the mini-window
 :cw       - toggles the mini-window (if errors exist)

** mapping **

Use mappings to save typing for things you frequently type. The first one below, when typing in insert mode, changes every occurence of ;so to System.out.println(); and leaves you in insert mode between the parentheses!

 imap ;so System.out.println();<left><left>
 imap ;ne <esc>/;<cr>a
 vmap <buffer> ;bo "zdi<B><c-r>z</B><esc>
The second one above, while in insert mode, moves you to the end of the next line when you type ;ne. The last one puts bold html tags around something you have visually selected.

These usually go in your .vimrc file. You can even have certain mappings loaded based on the type of file you are editing.

Quiz: what do these do? :)

nnoremap <F6> <C-W>w
nnoremap <S-F6> <C-W>W

map <C-L> :noh<CR>:redraw!<CR>

** registers **

When you copy and cut stuff, it gets saved to registers. You can pull stuff from those registers at a later time.

 :reg     - show named registers and what's in them
 "5p      - paste what's in register "5
You can also record a whole series of edits to a register, and then apply them over and over.

 qk       - records edits into register k 
            (q again to stop recording)
 @k       - execute recorded edits (macro)
 @@       - repeat last one
 5@@      - repeat 5 times

 "kp      - print macro k 
            (e.g., to edit or add to .vimrc)
 "kd      - replace register k with what cursor is on

** spelling ** 

This is a good place to learn about plugins. Go to www.vim.org, click on the Search link, search the scripts for spelling, and then download the vimspell.vim plugin. To install it, put it in your ~/.vim/plugin directory. Then vim a file and type :help vimspell.

The page on word completion also shows how to load a dictionary. You probably want to put the :set dictionary=/usr/share/dict/words in your .vimrc file.

** plugins **

Checking www.vim.org shows over a thousand downloadable plugins (scripts). Here are some useful ones:

matchit: extended % matching for HTML, LaTeX, etc...
vimspell: spell checker
timestamp: automatically timestamp files

** silly stuff ** 

Just try them! :)
    :set rightleft
    :help uganda
    :help!
    :help 42
    :help quotes
    :help holy-grail

** etc **

 evim                - easy vim...modeless 
                         (always in insert mode)
 :set backup         - makes tilda file backups
 :set mouse=a        - allow mouse clicks to change 
                         cursor position
 :set laststatus 0   - no status line
 :set noequalalways  - all windows not same size 
                         after split or close
 :set showmatch      - briefly jump to matching brackets
 vim.org             - tips and plugins
 comp.editors        - newsgroup 

** write - encodings **

:write ++enc=utf-8 russian.txt
    (from http://vimdoc.sourceforge.net/htmldoc/usr_45.html#45.4)

== Сайты == 

http://www.cs.swarthmore.edu/help/vim/home.html

http://habrahabr.ru/post/28181/
http://www.fprintf.net/vimCheatSheet.html
http://vim.rtorr.com/
http://worldtimzone.com/res/vi.html
http://michael.peopleofhonoronly.com/vim/
http://www.glump.net/files/2012/08/vi-vim-cheat-sheet-and-tutorial.pdf
http://people.csail.mit.edu/vgod/vim/vim-cheat-sheet-en.pdf
http://www.opennet.ru/base/rus/vim_rus_text.txt.html

== Конец ==
(Edited: 2016-03-03)
